#!/usr/bin/env python3

import argparse
import os
from colorama import init, Fore, Style, init
import re

def parse():
	parser = argparse.ArgumentParser(description='')
	parser.add_argument("lang",
						type=str.lower,
						help='The snippets language.')
	parser.add_argument("snippet",
						type=str.lower,
						help='The code snippet you want to display.')
	args = parser.parse_args()
	process(args)

def highlight(code):
	init() # Necessary to enable Windows support

	greencolor = f"{Fore.GREEN}"
	darkyellowcolor = f"{Fore.YELLOW}{Style.NORMAL}"
	darkbluecolor =f"{Fore.BLUE}{Style.DIM}"
	whitecolor = f"{Fore.WHITE}"

	green = ['+', '-', '*', '/', '%', '**', '^', '=', '<=', '>=', '+=', '-=', '==', '*=', '/=', '%=', '//=', '!=', '&=', '|=', '^=', '>>=', '<<=', '=<', '=>', '&', '|', '&&', '||', ';', 'and', 'or']
	darkyellow = ['if', 'else', 'elif', 'except', 'break', 'pass', 'continue', 'return', 'with', 'while', 'do', 'switch', 'case'] # What we want to color in dark yellow
	darkblue = ['void', 'int', 'char', 'string', 'double', 'float', 'struct', 'def', 'import', 'let', 'var', 'const'] # Same for dark blue
	white = ['(', ')', '{', '}',','] # Same for white

	finished = code

	for i in darkyellow:
		if i in code:
			finished = re.sub(fr"\b{i}\b", f"{darkyellowcolor}{i}{Style.RESET_ALL}", finished) # Iterate trough every string in darkyellow and replace its occurences (if any) by its colored version
	for i in darkblue:
		if i in code:
			finished = re.sub(fr"\b{i}\b", f"{darkbluecolor}{i}{Style.RESET_ALL}", finished)
		else:
			pass
	for i in white:
		if i in code:
			finished = finished.replace(i, f"{whitecolor}{i}{Style.RESET_ALL}")
		else:
			pass
	for i in green:
		if i in code:
			finished = finished.replace(i, f"{greencolor}{i}{Style.RESET_ALL}") # Used this method instead of regex as operators tend to cause problems with it.
		else:
			pass

	try:
		finished = re.sub(r'("[^"]+")', Fore.BLUE + r'\1' + Style.RESET_ALL, finished) # Replace any text between double quotes by its blue self (keeping the double quotes)
		finished = re.sub(r"('[^']+')", Fore.BLUE + r'\1' + Style.RESET_ALL, finished) # Same for single quotes
	except:
		pass

	return finished

def process(args):
	dirname = os.path.dirname(__file__)
	try:
		l = (dirname + "/snippets/" + args.lang + "/" + args.snippet + ".txt")
		f = open(l, 'r') # Open snippet
		print(highlight(f.read())) # Highlight and print
		f.close()
	except Exception as e:
		print(e)

if __name__ == "__main__":
	parse()
